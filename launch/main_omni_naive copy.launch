<?xml version='1.0'?>
<launch>

  <!-- <node pkg="tf" type="static_transform_publisher" name="static_broadcaster_map_base_link" args="0 0 0 0 0 0 base_link camera_bottom_screw_frame 50" /> -->
  <!-- <node pkg="tf2_ros" type="static_transform_publisher" name="camera_bottom_screw_frame_to_base_link" args="0 0 0 0 0 0 base_link camera_bottom_screw_frame 100"/> -->
  <!-- <node pkg="tf" type="static_transform_publisher" name="static_broadcaster_map_base_link" args="0 0 0 0 0 0 base_link camera_color_optical_frame 50" /> -->

  <arg name="gazebo_gui" default="true"/>
  <arg name="rviz_gui" default="false"/>

  <param name="robot_description" command="$(find xacro)/xacro --inorder '$(find depth_gazebo)/urdf/omni_robot_d435.xacro'" />
  <!-- Send robot states to tf -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="false" output="screen">
    <param name="publish_frequency" type="double" value="40.0" />
    <remap from="/joint_states" to="/omni_control/joint_states" />
  </node>

  <rosparam file="$(find depth_gazebo)/config/omni_control.yaml" command="load"/>
  <node name="rviz" pkg="rviz" type="rviz" args="-d $(find depth_gazebo)/rviz/omni_naive.rviz" required="true" />
  
  <!-- SELECT THE WORLD TO TEST mapping: -->
  <!-- test_lvl_v2.world || pub_lvl.world || best3.world || best2.world -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find depth_gazebo)/worlds/test_lvl_v2.world"/>
    <arg name="paused" value="false"/>
    <arg name="use_sim_time" value="true"/>
    <arg name="gui" value="$(arg gazebo_gui)"/>
    <arg name="debug" value="false"/>
  </include>
  <node name="depth_camera_gazebo_scene_spawn" pkg="gazebo_ros" type="spawn_model" output="screen"
        args="-urdf -param robot_description -model robot -x 1.0 -y 1.0 -z 0.05 -Y -1.57" />
         <!-- -x 1.0 -y 7.6 -z 0.05 -Y -1.57 -->

  <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false"
        output="screen" ns="/omni_control"
        args="front_right_wheel_joint front_left_wheel_joint back_left_wheel_joint back_right_wheel_joint joint_state_controller"/>

  <!-- provide a movements via teleop  -->
  <node name="move_node" pkg="depth_gazebo" type="move.py"/>
  <!-- remove ground plane from point cloud -->
  <!-- <node name="pcl_ground_removal" pkg="depth_gazebo" type="pcl_proccessing"/> -->
  <!-- add gaussian noise to pointcloud -->
  <!-- <node name="rgbd_add_noise" pkg="depth_gazebo" type="rgbd_noise"/> -->
  <!-- map bayes binary static filter -->
  <!-- <node name="mapping_node" pkg="depth_gazebo" type="occupancy_grid.py"/> -->
  <!-- remove NaN and +inf & -inf from laserscan msg -->
  <!-- <node name="scan_filter_node" pkg="depth_gazebo" type="scan_filter.py"/> -->

  <!-- <node name="depthimage_add_noise" pkg="depth_gazebo" type="depthimage_noise"/> -->

  <!-- AMCL for provide  odom -> map transform -->
  <!-- <include file="$(find depth_gazebo)/launch/amcl_omni.launch"/> -->
  
  <!-- launch rtabmap_odom(not working) OR ORB SLAM 2 for providing tf: odom->base_link -->
  <!-- or just provide dynamic broadcasting -->
  <!-- <include file="$(find depth_gazebo)/launch/rtabmap.launch"/> -->
  <include file="$(find depth_gazebo)/launch/orb_slam2.launch"/>
  <!-- <node name="tf2_odom_to_base_link" pkg="depth_gazebo" type="odom_to_base_link_broadcaster.py"/> -->

  <!-- provide depth_image -> laserscan msg -->
  <!-- <include file="$(find depth_gazebo)/launch/depth_to_laserscan.launch"/> -->
  
  <!-- DEBUG PURPOSES -->
  <node pkg="rqt_graph" type="rqt_graph" name="rqt_graph" output="screen"/>
  <node pkg="rqt_tf_tree" type="rqt_tf_tree" name="rqt_tf_tree" output="screen"/>
</launch>