<?xml version='1.0'?>
<launch>
  <!-- EX NAME: main_omni_naive.launch -->
  <!-- ACCORDING TO SEMI-FINAL TASK: -->
  <!-- setup: omni platform + mono camera + laser beams -->
  
  <arg name="gazebo_gui" default="true"/>
  <arg name="rviz_gui" default="false"/>
  <arg name="scan_topic"     default="scan"/>

  <param name="robot_description" command="$(find xacro)/xacro --inorder '$(find solution_maze)/urdf/robot_omni.xacro'" />
  <!-- Send robot states to tf -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="false" output="screen">
    <param name="publish_frequency" type="double" value="40.0" />
    <remap from="/joint_states" to="/omni_control/joint_states" />
  </node>

  <rosparam file="$(find solution_maze)/config/omni_control.yaml" command="load"/>
  
  <!-- SELECT THE WORLD: -->
  <!-- test_lvl_v2.world || pub_lvl.world -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find solution_maze)/worlds/pub_lvl.world"/>
    <arg name="paused" value="false"/>
    <arg name="use_sim_time" value="true"/>
    <arg name="gui" value="$(arg gazebo_gui)"/>
    <arg name="debug" value="false"/>
  </include>
  <node name="depth_camera_gazebo_scene_spawn" pkg="gazebo_ros" type="spawn_model" output="screen"
        args="-urdf -param robot_description -model robot -x 2.0 -y 0.6 -z 0.05 -Y 0.0" />
         <!-- -x 1.0 -y 7.6 -z 0.05 -Y -1.57 -->

  <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false"
        output="screen" ns="/omni_control"
        args="front_right_wheel_joint front_left_wheel_joint back_left_wheel_joint back_right_wheel_joint joint_state_controller"/>

  <include file="$(find solution_maze)/launch/orb_slam3.launch"/>
  <!-- provide a movements via teleop  -->
  <node name="move_node" pkg="solution_maze" type="move.py"/>
  <!-- add gaussian noise to pointcloud -->
  <!-- <node name="rgbd_add_noise" pkg="solution_maze" type="rgbd_noise"/> -->
  <!-- map bayes binary static filter -->
  <!-- <node name="mapping_node" pkg="solution_maze" type="occupancy_grid.py"/> -->
  <!-- remove NaN and +inf & -inf from laserscan msg -->
  <!-- <node name="scan_filter_node" pkg="solution_maze" type="scan_filter.py"/> -->

  <!-- <node name="depthimage_add_noise" pkg="solution_maze" type="depthimage_noise"/> -->

  <!-- AMCL for provide  odom -> map transform -->
  <!-- <include file="$(find solution_maze)/launch/amcl_omni.launch"/> -->
  
  <!-- launch rtabmap_odom(not working) OR ORB SLAM 2 for providing tf: odom->base_link -->
  <!-- or just provide dynamic broadcasting -->
  <!-- <include file="$(find solution_maze)/launch/rtabmap.launch"/> -->
  <!-- <include file="$(find depth_gazebo)/launch/orb_slam2.launch"/> -->
  <!-- <node name="tf2_odom_to_base_link" pkg="solution_maze" type="odom_to_base_link_broadcaster.py"/> -->
  <node name="tf2_static" pkg="solution_maze" type="static_broadcaster.py"/>
  <node name="tf2_start" pkg="solution_maze" type="start_to_odom_broadcaster.py"/>
  <!-- remove ground plane from point cloud -->
  <node name="pcl_ground_removal" pkg="solution_maze" type="pcl_proccessing"/>

  <!-- provide depth_image -> laserscan msg -->
  <!-- <include file="$(find solution_maze)/launch/depth_to_laserscan.launch"/> -->
  
  <!-- Move Base -->
  <!-- <node name="move_base" pkg="move_base" type="move_base" respawn="false" output="screen">
    <param name="base_global_planner" value="navfn/NavfnROS" />
    <param name="base_local_planner" value="base_local_planner/TrajectoryPlannerROS"/>
    <rosparam file="$(find solution_maze)/config/costmap_common_params.yaml" command="load" ns="global_costmap" />
    <rosparam file="$(find solution_maze)/config/costmap_common_params.yaml" command="load" ns="local_costmap" />
    <rosparam file="$(find solution_maze)/config/local_costmap_params.yaml" command="load" />
    <rosparam file="$(find solution_maze)/config/global_costmap_params.yaml" command="load" />
    <rosparam file="$(find solution_maze)/config/base_local_planner_params.yaml" command="load" />
    <remap from="scan" to="$(arg scan_topic)"/>
  </node>  -->


  <!-- DEBUG PURPOSES -->
  <node pkg="rqt_graph" type="rqt_graph" name="rqt_graph" output="screen"/>
  <node pkg="rqt_tf_tree" type="rqt_tf_tree" name="rqt_tf_tree" output="screen"/>
  <node name="rviz" pkg="rviz" type="rviz" args="-d $(find solution_maze)/rviz/maze.rviz" required="true" />
</launch>